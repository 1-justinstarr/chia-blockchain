(mod (
  NFT_MOD_HASH
  SINGLETON_STRUCT ; ((SINGLETON_MOD_HASH, (SINGLETON_LAUNCHER_ID, LAUNCHER_PUZZLE_HASH)))
  CURRENT_OWNER_DID
  TRANSFER_PROGRAM_MOD_HASH
  TRANSFER_PROGRAM_CURRY_PARAMS
  METADATA
  my_amount
  my_did_inner_hash
  new_did
  new_did_inner_hash
  trade_prices_list
  transfer_program_reveal
  transfer_program_solution
)

  (include condition_codes.clvm)
  (include curry-and-treehash.clinc)
  (include singleton_truths.clib)

  ; takes a lisp tree and returns the hash of it
  (defun sha256tree1 (TREE)
        (if (l TREE)
            (sha256 2 (sha256tree1 (f TREE)) (sha256tree1 (r TREE)))
            (sha256 ONE TREE)
        )
  )

  (defun-inline nft_puzzle_hash (NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH next_owner_did transfer_program_curry_params)
    (puzzle-hash-of-curried-function NFT_MOD_HASH
                                     (sha256tree1 TRANSFER_PROGRAM_CURRY_PARAMS)
                                     (sha256tree1 TRANSFER_PROGRAM_MOD_HASH)
                                     (sha256 ONE next_owner_did)
                                     (sha256tree1 SINGLETON_STRUCT)
                                     (sha256 ONE NFT_MOD_HASH)
    )
  )

  ;; return the full puzzlehash for a singleton with the innerpuzzle curried in
  ; puzzle-hash-of-curried-function is imported from curry-and-treehash.clinc
  (defun-inline calculate_full_puzzle_hash (SINGLETON_STRUCT inner_puzzle_hash)
     (puzzle-hash-of-curried-function (f SINGLETON_STRUCT)
                                      inner_puzzle_hash
                                      (sha256tree1 SINGLETON_STRUCT)
     )
  )

  ; if we find an update, recreate ourselves with the update
  ; otherwise recreate ourselves as we are
  (defun parse_transfer_prog_output (NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH TRANSFER_PROGRAM_CURRY_PARAMS new_did my_amount output found_update)
    (if output
      (c
        (f output)
        (if (= (f (f output)) -22)
          (c
            (list CREATE_COIN (nft_puzzle_hash NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH new_did (r (f output))) my_amount (list new_did))
            (parse_transfer_prog_output NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH TRANSFER_PROGRAM_CURRY_PARAMS new_did my_amount (r output) 1)
          )
          (parse_transfer_prog_output NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH TRANSFER_PROGRAM_CURRY_PARAMS new_did my_amount (r output) found_update)
        )
      )
      (if found_update  ; if we're at the end of the loop, check if we've already recreated ourselves or not
        ()
        (list (list CREATE_COIN (nft_puzzle_hash NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH new_did TRANSFER_PROGRAM_CURRY_PARAMS) my_amount (list new_did)))
      )
    )
  )

  ; main
  (c
    (list ASSERT_MY_AMOUNT my_amount)
    (if new_did
      (if (= (sha256tree1 transfer_program_reveal) TRANSFER_PROGRAM_MOD_HASH)
        (c
          (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash (c (f SINGLETON_STRUCT) (c CURRENT_OWNER_DID (r (r SINGLETON_STRUCT)))) my_did_inner_hash) (sha256tree1 (list transfer_program_solution new_did trade_prices_list))))
                                                                                                                ; (METADATA CURRY_PARAMS SINGLETON_STRUCT current_owner trade_price_list my_did_inner_hash new_did new_did_inner_hash my_nft_id solution)
          (parse_transfer_prog_output NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH TRANSFER_PROGRAM_CURRY_PARAMS new_did my_amount (a transfer_program_reveal (list METADATA TRANSFER_PROGRAM_CURRY_PARAMS SINGLETON_STRUCT CURRENT_OWNER_DID trade_prices_list my_did_inner_hash new_did new_did_inner_hash transfer_program_solution)) 0)
        )
        (x)
      )
      (list
        (list CREATE_COIN (nft_puzzle_hash NFT_MOD_HASH SINGLETON_STRUCT TRANSFER_PROGRAM_MOD_HASH CURRENT_OWNER_DID) my_amount (list CURRENT_OWNER_DID))
        (list ASSERT_PUZZLE_ANNOUNCEMENT (sha256 (calculate_full_puzzle_hash (c (f SINGLETON_STRUCT) (c CURRENT_OWNER_DID (r (r SINGLETON_STRUCT)))) my_did_inner_hash) 'a'))
        (list CREATE_PUZZLE_ANNOUNCEMENT CURRENT_OWNER_DID)
      )
    )
  )

)
